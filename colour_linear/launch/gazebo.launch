<launch>
  <!-- Export env variable so that gazebo finds our models -->
  <env name="GAZEBO_MODEL_PATH"
       value="$(find colour_linear)/models:$(optenv GAZEBO_MODEL_PATH)" />
  <!-- Ignore online database -->
  <env name="GAZEBO_MODEL_DATABASE_URI"
       value="/" />

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="threshold" default="10"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find colour_linear)/world/sim.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find colour_linear)/urdf/example_robot.urdf.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model linear_accuator -param robot_description"/>

  <!-- ros_control rrbot launch file -->
  <include file="$(find colour_linear)/launch/control.launch"/>

  <node pkg="colour_linear" name="cam" type="cam.py" output="screen"/>
  
  <param name="threshold" value="$(arg threshold)"></param>
  <node pkg="colour_linear" name="action_server" type="action_server.py" output="screen"/>
    <param name="threshold" value="$(arg threshold)"></param>
  <!-- Show in Rviz   
  <include file="$(find colour_linear)/launch/rviz.launch"/>-->


</launch>